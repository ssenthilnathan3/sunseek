generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  hashedPassword String?
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt

  accounts Account[]
  sessions Session[]

  // Relation fields
  sunsets        Sunset[]
  streak         Streak? // ðŸ‘ˆ Remove relation attributes here
  communityPosts CommunityPost[]
  likes          Like[]
  comments       Comment[]
}

model Streak {
  id        String   @id @default(cuid())
  userId    String   @unique
  count     Int      @default(1)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // ðŸ‘ˆ Keep relation attributes here
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Sunset {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  imageUrl   String?
  caption    String?
  location   String?
  visibility String? // e.g., "Excellent", "Cloudy", optional metadata

  createdAt DateTime @default(now())

  likes    Like[]
  comments Comment[]
}

model CommunityPost {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  title     String
  content   String?
  mediaUrl  String? // optional image/video
  createdAt DateTime @default(now())

  likes    Like[]
  comments Comment[]
}

model Like {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  sunsetId String? // Either Sunset or CommunityPost must be present
  sunset   Sunset? @relation(fields: [sunsetId], references: [id], onDelete: Cascade)

  communityPostId String?
  communityPost   CommunityPost? @relation(fields: [communityPostId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, sunsetId])
  @@unique([userId, communityPostId])
}

model Comment {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  content  String
  sunsetId String?
  sunset   Sunset? @relation(fields: [sunsetId], references: [id], onDelete: Cascade)

  communityPostId String?
  communityPost   CommunityPost? @relation(fields: [communityPostId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}
